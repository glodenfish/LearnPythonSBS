字符串的学习：字符串操作是python中日常操作的重要组成部分，几乎用到了python编程的方方面面，掌握字符串操作可以极大的提高我们的工作效率。python的字符串操作非常的丰富特别是python的切片使用方便灵活。


说道字符串我们就不得不说ascii和unicode这2个概念。我们知道单个的字符为一个字节8位  ，一个汉字为2个字节。  这种使用双字节编码的字符我们称为unicode字符。
ascii通常表示的是单字节编码。由于单字节编码是使用一个字节 8bit来表示。所以它最多能表示的符号为2^8个符号，0~255个符号。 双字节编码表示的字符数2^16-1个字符也就是0~65535个字符。

通常情况下我们需要从字节码到字符串的转换工作。以及在字符串上实现我们的相关的业务操作。

python中的字符串分为五种：
  字符 'python'
  字符串"python"
  多行字符串 """python"""
  unicode字符 u'中国'   u'\u4e2d\u56fd'  -- python的.py文件默认使用utf-8 unicode编码
  原生字符 r'中国'      '\xd6\xd0\xb9\xfa'

  有一种情况比如使用正则表达式的时候：
  re.compile("^((?:[(]\\d+[)])?\\s*\\d+(?:-\\d+)?)$")
  需要\作为转义字符，如果使用r''就可以减少\的书写。
  re.compile(r"^((?:[(]\d+[)])?\s*\d+(?:-\d+)?)$")

  多行字符可以这么写：
  s = "this is a good python programme" + \
      "yes; i got it"
  s = ("this is a good python programme"
       "yes; i got it")
  python建议使用第二种写法便于编译

字符串编码的转换
 >>> ord('\r')
 13
 >>> ord('r')
 114
 >>> hex(ord('r'))
 '0x72'
 >>> chr(0x72)
 'r'
 >>> ascii('0x72')

 字符串在python中是一个字符串序列。
 s可以使用s[0] 下标来访问。
 对于序列可以使用分片技术来对序列进行切片。语法如下：
 s[start]    序列开始的下标
 s[start:end]  序列开始结束，结束为end-1  start从0开始
 s[start:end:step] step可以负数表示反向步进。

 例子：
 s[0]------s[8]
 Light ray 
 s[-9]------s[-1] 

 s[-1:2:-2]  取-1开始 到 s[2]结束 反向步进为2的切片
 'yrt'



